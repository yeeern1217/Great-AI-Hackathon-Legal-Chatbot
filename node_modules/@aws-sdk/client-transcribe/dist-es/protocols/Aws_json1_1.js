import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { BadRequestException, ConflictException, InternalFailureException, LimitExceededException, NotFoundException, } from "../models/models_0";
import { TranscribeServiceException as __BaseException } from "../models/TranscribeServiceException";
export const se_CreateCallAnalyticsCategoryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCallAnalyticsCategory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLanguageModelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLanguageModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateMedicalVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMedicalVocabulary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVocabulary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVocabularyFilterCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVocabularyFilter");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCallAnalyticsCategoryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCallAnalyticsCategory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCallAnalyticsJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCallAnalyticsJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLanguageModelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLanguageModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMedicalScribeJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMedicalScribeJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMedicalTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMedicalTranscriptionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMedicalVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMedicalVocabulary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTranscriptionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVocabulary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVocabularyFilterCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVocabularyFilter");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLanguageModelCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLanguageModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCallAnalyticsCategoryCommand = async (input, context) => {
    const headers = sharedHeaders("GetCallAnalyticsCategory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCallAnalyticsJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetCallAnalyticsJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMedicalScribeJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetMedicalScribeJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMedicalTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetMedicalTranscriptionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMedicalVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("GetMedicalVocabulary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetTranscriptionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("GetVocabulary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetVocabularyFilterCommand = async (input, context) => {
    const headers = sharedHeaders("GetVocabularyFilter");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCallAnalyticsCategoriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCallAnalyticsCategories");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCallAnalyticsJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCallAnalyticsJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLanguageModelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLanguageModels");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMedicalScribeJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMedicalScribeJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMedicalTranscriptionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMedicalTranscriptionJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMedicalVocabulariesCommand = async (input, context) => {
    const headers = sharedHeaders("ListMedicalVocabularies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTranscriptionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTranscriptionJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListVocabulariesCommand = async (input, context) => {
    const headers = sharedHeaders("ListVocabularies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListVocabularyFiltersCommand = async (input, context) => {
    const headers = sharedHeaders("ListVocabularyFilters");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartCallAnalyticsJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartCallAnalyticsJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartMedicalScribeJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartMedicalScribeJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartMedicalTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartMedicalTranscriptionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartTranscriptionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCallAnalyticsCategoryCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCallAnalyticsCategory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateMedicalVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMedicalVocabulary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateVocabulary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateVocabularyFilterCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateVocabularyFilter");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateCallAnalyticsCategoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCallAnalyticsCategoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateLanguageModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateMedicalVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateMedicalVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateVocabularyFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVocabularyFilterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteCallAnalyticsCategoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteCallAnalyticsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteLanguageModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteMedicalScribeJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteMedicalTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteMedicalVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteVocabularyFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeLanguageModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLanguageModelResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCallAnalyticsCategoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCallAnalyticsCategoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCallAnalyticsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCallAnalyticsJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMedicalScribeJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMedicalScribeJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMedicalTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMedicalTranscriptionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMedicalVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMedicalVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTranscriptionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetVocabularyFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetVocabularyFilterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCallAnalyticsCategoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCallAnalyticsCategoriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCallAnalyticsJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCallAnalyticsJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListLanguageModelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListLanguageModelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMedicalScribeJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMedicalScribeJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMedicalTranscriptionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMedicalTranscriptionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMedicalVocabulariesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMedicalVocabulariesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTranscriptionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTranscriptionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListVocabulariesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListVocabulariesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListVocabularyFiltersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListVocabularyFiltersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartCallAnalyticsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartCallAnalyticsJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartMedicalScribeJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartMedicalScribeJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartMedicalTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartMedicalTranscriptionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartTranscriptionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCallAnalyticsCategoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateCallAnalyticsCategoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateMedicalVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateMedicalVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateVocabularyFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateVocabularyFilterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CallAnalyticsJob = (output, context) => {
    return take(output, {
        CallAnalyticsJobDetails: _json,
        CallAnalyticsJobName: __expectString,
        CallAnalyticsJobStatus: __expectString,
        ChannelDefinitions: _json,
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataAccessRoleArn: __expectString,
        FailureReason: __expectString,
        IdentifiedLanguageScore: __limitedParseFloat32,
        LanguageCode: __expectString,
        Media: _json,
        MediaFormat: __expectString,
        MediaSampleRateHertz: __expectInt32,
        Settings: _json,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Tags: _json,
        Transcript: _json,
    });
};
const de_CallAnalyticsJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CallAnalyticsJobSummary(entry, context);
    });
    return retVal;
};
const de_CallAnalyticsJobSummary = (output, context) => {
    return take(output, {
        CallAnalyticsJobDetails: _json,
        CallAnalyticsJobName: __expectString,
        CallAnalyticsJobStatus: __expectString,
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        LanguageCode: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_CategoryProperties = (output, context) => {
    return take(output, {
        CategoryName: __expectString,
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputType: __expectString,
        LastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Rules: _json,
        Tags: _json,
    });
};
const de_CategoryPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CategoryProperties(entry, context);
    });
    return retVal;
};
const de_CreateCallAnalyticsCategoryResponse = (output, context) => {
    return take(output, {
        CategoryProperties: (_) => de_CategoryProperties(_, context),
    });
};
const de_CreateMedicalVocabularyResponse = (output, context) => {
    return take(output, {
        FailureReason: __expectString,
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyName: __expectString,
        VocabularyState: __expectString,
    });
};
const de_CreateVocabularyFilterResponse = (output, context) => {
    return take(output, {
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyFilterName: __expectString,
    });
};
const de_CreateVocabularyResponse = (output, context) => {
    return take(output, {
        FailureReason: __expectString,
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyName: __expectString,
        VocabularyState: __expectString,
    });
};
const de_DescribeLanguageModelResponse = (output, context) => {
    return take(output, {
        LanguageModel: (_) => de_LanguageModel(_, context),
    });
};
const de_GetCallAnalyticsCategoryResponse = (output, context) => {
    return take(output, {
        CategoryProperties: (_) => de_CategoryProperties(_, context),
    });
};
const de_GetCallAnalyticsJobResponse = (output, context) => {
    return take(output, {
        CallAnalyticsJob: (_) => de_CallAnalyticsJob(_, context),
    });
};
const de_GetMedicalScribeJobResponse = (output, context) => {
    return take(output, {
        MedicalScribeJob: (_) => de_MedicalScribeJob(_, context),
    });
};
const de_GetMedicalTranscriptionJobResponse = (output, context) => {
    return take(output, {
        MedicalTranscriptionJob: (_) => de_MedicalTranscriptionJob(_, context),
    });
};
const de_GetMedicalVocabularyResponse = (output, context) => {
    return take(output, {
        DownloadUri: __expectString,
        FailureReason: __expectString,
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyName: __expectString,
        VocabularyState: __expectString,
    });
};
const de_GetTranscriptionJobResponse = (output, context) => {
    return take(output, {
        TranscriptionJob: (_) => de_TranscriptionJob(_, context),
    });
};
const de_GetVocabularyFilterResponse = (output, context) => {
    return take(output, {
        DownloadUri: __expectString,
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyFilterName: __expectString,
    });
};
const de_GetVocabularyResponse = (output, context) => {
    return take(output, {
        DownloadUri: __expectString,
        FailureReason: __expectString,
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyName: __expectString,
        VocabularyState: __expectString,
    });
};
const de_LanguageCodeItem = (output, context) => {
    return take(output, {
        DurationInSeconds: __limitedParseFloat32,
        LanguageCode: __expectString,
    });
};
const de_LanguageCodeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LanguageCodeItem(entry, context);
    });
    return retVal;
};
const de_LanguageModel = (output, context) => {
    return take(output, {
        BaseModelName: __expectString,
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        InputDataConfig: _json,
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelName: __expectString,
        ModelStatus: __expectString,
        UpgradeAvailability: __expectBoolean,
    });
};
const de_ListCallAnalyticsCategoriesResponse = (output, context) => {
    return take(output, {
        Categories: (_) => de_CategoryPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListCallAnalyticsJobsResponse = (output, context) => {
    return take(output, {
        CallAnalyticsJobSummaries: (_) => de_CallAnalyticsJobSummaries(_, context),
        NextToken: __expectString,
        Status: __expectString,
    });
};
const de_ListLanguageModelsResponse = (output, context) => {
    return take(output, {
        Models: (_) => de_Models(_, context),
        NextToken: __expectString,
    });
};
const de_ListMedicalScribeJobsResponse = (output, context) => {
    return take(output, {
        MedicalScribeJobSummaries: (_) => de_MedicalScribeJobSummaries(_, context),
        NextToken: __expectString,
        Status: __expectString,
    });
};
const de_ListMedicalTranscriptionJobsResponse = (output, context) => {
    return take(output, {
        MedicalTranscriptionJobSummaries: (_) => de_MedicalTranscriptionJobSummaries(_, context),
        NextToken: __expectString,
        Status: __expectString,
    });
};
const de_ListMedicalVocabulariesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Status: __expectString,
        Vocabularies: (_) => de_Vocabularies(_, context),
    });
};
const de_ListTranscriptionJobsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Status: __expectString,
        TranscriptionJobSummaries: (_) => de_TranscriptionJobSummaries(_, context),
    });
};
const de_ListVocabulariesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Status: __expectString,
        Vocabularies: (_) => de_Vocabularies(_, context),
    });
};
const de_ListVocabularyFiltersResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        VocabularyFilters: (_) => de_VocabularyFilters(_, context),
    });
};
const de_MedicalScribeJob = (output, context) => {
    return take(output, {
        ChannelDefinitions: _json,
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataAccessRoleArn: __expectString,
        FailureReason: __expectString,
        LanguageCode: __expectString,
        Media: _json,
        MedicalScribeContextProvided: __expectBoolean,
        MedicalScribeJobName: __expectString,
        MedicalScribeJobStatus: __expectString,
        MedicalScribeOutput: _json,
        Settings: _json,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Tags: _json,
    });
};
const de_MedicalScribeJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MedicalScribeJobSummary(entry, context);
    });
    return retVal;
};
const de_MedicalScribeJobSummary = (output, context) => {
    return take(output, {
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        LanguageCode: __expectString,
        MedicalScribeJobName: __expectString,
        MedicalScribeJobStatus: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_MedicalTranscriptionJob = (output, context) => {
    return take(output, {
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ContentIdentificationType: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        LanguageCode: __expectString,
        Media: _json,
        MediaFormat: __expectString,
        MediaSampleRateHertz: __expectInt32,
        MedicalTranscriptionJobName: __expectString,
        Settings: _json,
        Specialty: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Tags: _json,
        Transcript: _json,
        TranscriptionJobStatus: __expectString,
        Type: __expectString,
    });
};
const de_MedicalTranscriptionJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MedicalTranscriptionJobSummary(entry, context);
    });
    return retVal;
};
const de_MedicalTranscriptionJobSummary = (output, context) => {
    return take(output, {
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ContentIdentificationType: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        LanguageCode: __expectString,
        MedicalTranscriptionJobName: __expectString,
        OutputLocationType: __expectString,
        Specialty: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TranscriptionJobStatus: __expectString,
        Type: __expectString,
    });
};
const de_Models = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LanguageModel(entry, context);
    });
    return retVal;
};
const de_StartCallAnalyticsJobResponse = (output, context) => {
    return take(output, {
        CallAnalyticsJob: (_) => de_CallAnalyticsJob(_, context),
    });
};
const de_StartMedicalScribeJobResponse = (output, context) => {
    return take(output, {
        MedicalScribeJob: (_) => de_MedicalScribeJob(_, context),
    });
};
const de_StartMedicalTranscriptionJobResponse = (output, context) => {
    return take(output, {
        MedicalTranscriptionJob: (_) => de_MedicalTranscriptionJob(_, context),
    });
};
const de_StartTranscriptionJobResponse = (output, context) => {
    return take(output, {
        TranscriptionJob: (_) => de_TranscriptionJob(_, context),
    });
};
const de_TranscriptionJob = (output, context) => {
    return take(output, {
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ContentRedaction: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        IdentifiedLanguageScore: __limitedParseFloat32,
        IdentifyLanguage: __expectBoolean,
        IdentifyMultipleLanguages: __expectBoolean,
        JobExecutionSettings: _json,
        LanguageCode: __expectString,
        LanguageCodes: (_) => de_LanguageCodeList(_, context),
        LanguageIdSettings: _json,
        LanguageOptions: _json,
        Media: _json,
        MediaFormat: __expectString,
        MediaSampleRateHertz: __expectInt32,
        ModelSettings: _json,
        Settings: _json,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Subtitles: _json,
        Tags: _json,
        ToxicityDetection: _json,
        Transcript: _json,
        TranscriptionJobName: __expectString,
        TranscriptionJobStatus: __expectString,
    });
};
const de_TranscriptionJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TranscriptionJobSummary(entry, context);
    });
    return retVal;
};
const de_TranscriptionJobSummary = (output, context) => {
    return take(output, {
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ContentRedaction: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        IdentifiedLanguageScore: __limitedParseFloat32,
        IdentifyLanguage: __expectBoolean,
        IdentifyMultipleLanguages: __expectBoolean,
        LanguageCode: __expectString,
        LanguageCodes: (_) => de_LanguageCodeList(_, context),
        ModelSettings: _json,
        OutputLocationType: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ToxicityDetection: _json,
        TranscriptionJobName: __expectString,
        TranscriptionJobStatus: __expectString,
    });
};
const de_UpdateCallAnalyticsCategoryResponse = (output, context) => {
    return take(output, {
        CategoryProperties: (_) => de_CategoryProperties(_, context),
    });
};
const de_UpdateMedicalVocabularyResponse = (output, context) => {
    return take(output, {
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyName: __expectString,
        VocabularyState: __expectString,
    });
};
const de_UpdateVocabularyFilterResponse = (output, context) => {
    return take(output, {
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyFilterName: __expectString,
    });
};
const de_UpdateVocabularyResponse = (output, context) => {
    return take(output, {
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyName: __expectString,
        VocabularyState: __expectString,
    });
};
const de_Vocabularies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VocabularyInfo(entry, context);
    });
    return retVal;
};
const de_VocabularyFilterInfo = (output, context) => {
    return take(output, {
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyFilterName: __expectString,
    });
};
const de_VocabularyFilters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VocabularyFilterInfo(entry, context);
    });
    return retVal;
};
const de_VocabularyInfo = (output, context) => {
    return take(output, {
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VocabularyName: __expectString,
        VocabularyState: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `Transcribe.${operation}`,
    };
}
