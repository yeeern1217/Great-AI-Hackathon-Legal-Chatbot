{
  "version": 3,
  "sources": ["../../lottie-react/compiled/hooks/useLottie.js", "../../lottie-react/compiled/hooks/useLottieInteractivity.js", "../../lottie-react/compiled/components/Lottie.js"],
  "sourcesContent": ["import lottie from \"lottie-web\";\nimport React, { useEffect, useRef, useState, } from \"react\";\nconst useLottie = (props, style) => {\n    const { animationData, loop, autoplay, initialSegment, onComplete, onLoopComplete, onEnterFrame, onSegmentStart, onConfigReady, onDataReady, onDataFailed, onLoadedImages, onDOMLoaded, onDestroy, \n    // Specified here to take them out from the 'rest'\n    lottieRef, renderer, name, assetsPath, rendererSettings, \n    // TODO: find a better way to extract the html props to avoid specifying\n    //  all the props that we want to exclude (as you can see above)\n    ...rest } = props;\n    const [animationLoaded, setAnimationLoaded] = useState(false);\n    const animationInstanceRef = useRef();\n    const animationContainer = useRef(null);\n    /*\n          ======================================\n              INTERACTION METHODS\n          ======================================\n       */\n    /**\n     * Play\n     */\n    const play = () => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.play();\n    };\n    /**\n     * Stop\n     */\n    const stop = () => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.stop();\n    };\n    /**\n     * Pause\n     */\n    const pause = () => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.pause();\n    };\n    /**\n     * Set animation speed\n     * @param speed\n     */\n    const setSpeed = (speed) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSpeed(speed);\n    };\n    /**\n     * Got to frame and play\n     * @param value\n     * @param isFrame\n     */\n    const goToAndPlay = (value, isFrame) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndPlay(value, isFrame);\n    };\n    /**\n     * Got to frame and stop\n     * @param value\n     * @param isFrame\n     */\n    const goToAndStop = (value, isFrame) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndStop(value, isFrame);\n    };\n    /**\n     * Set animation direction\n     * @param direction\n     */\n    const setDirection = (direction) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setDirection(direction);\n    };\n    /**\n     * Play animation segments\n     * @param segments\n     * @param forceFlag\n     */\n    const playSegments = (segments, forceFlag) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.playSegments(segments, forceFlag);\n    };\n    /**\n     * Set sub frames\n     * @param useSubFrames\n     */\n    const setSubframe = (useSubFrames) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSubframe(useSubFrames);\n    };\n    /**\n     * Get animation duration\n     * @param inFrames\n     */\n    const getDuration = (inFrames) => { var _a; return (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.getDuration(inFrames); };\n    /**\n     * Destroy animation\n     */\n    const destroy = () => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n        // Removing the reference to the animation so separate cleanups are skipped.\n        // Without it the internal `lottie-react` instance throws exceptions as it already cleared itself on destroy.\n        animationInstanceRef.current = undefined;\n    };\n    /*\n          ======================================\n              LOTTIE\n          ======================================\n       */\n    /**\n     * Load a new animation, and if it's the case, destroy the previous one\n     * @param {Object} forcedConfigs\n     */\n    const loadAnimation = (forcedConfigs = {}) => {\n        var _a;\n        // Return if the container ref is null\n        if (!animationContainer.current) {\n            return;\n        }\n        // Destroy any previous instance\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n        // Build the animation configuration\n        const config = {\n            ...props,\n            ...forcedConfigs,\n            container: animationContainer.current,\n        };\n        // Save the animation instance\n        animationInstanceRef.current = lottie.loadAnimation(config);\n        setAnimationLoaded(!!animationInstanceRef.current);\n        // Return a function that will clean up\n        return () => {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n            animationInstanceRef.current = undefined;\n        };\n    };\n    /**\n     * (Re)Initialize when animation data changed\n     */\n    useEffect(() => {\n        const onUnmount = loadAnimation();\n        // Clean up on unmount\n        return () => onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [animationData, loop]);\n    // Update the autoplay state\n    useEffect(() => {\n        if (!animationInstanceRef.current) {\n            return;\n        }\n        animationInstanceRef.current.autoplay = !!autoplay;\n    }, [autoplay]);\n    // Update the initial segment state\n    useEffect(() => {\n        if (!animationInstanceRef.current) {\n            return;\n        }\n        // When null should reset to default animation length\n        if (!initialSegment) {\n            animationInstanceRef.current.resetSegments(true);\n            return;\n        }\n        // If it's not a valid segment, do nothing\n        if (!Array.isArray(initialSegment) || !initialSegment.length) {\n            return;\n        }\n        // If the current position it's not in the new segment\n        // set the current position to start\n        if (animationInstanceRef.current.currentRawFrame < initialSegment[0] ||\n            animationInstanceRef.current.currentRawFrame > initialSegment[1]) {\n            animationInstanceRef.current.currentRawFrame = initialSegment[0];\n        }\n        // Update the segment\n        animationInstanceRef.current.setSegment(initialSegment[0], initialSegment[1]);\n    }, [initialSegment]);\n    /*\n          ======================================\n              EVENTS\n          ======================================\n       */\n    /**\n     * Reinitialize listener on change\n     */\n    useEffect(() => {\n        const partialListeners = [\n            { name: \"complete\", handler: onComplete },\n            { name: \"loopComplete\", handler: onLoopComplete },\n            { name: \"enterFrame\", handler: onEnterFrame },\n            { name: \"segmentStart\", handler: onSegmentStart },\n            { name: \"config_ready\", handler: onConfigReady },\n            { name: \"data_ready\", handler: onDataReady },\n            { name: \"data_failed\", handler: onDataFailed },\n            { name: \"loaded_images\", handler: onLoadedImages },\n            { name: \"DOMLoaded\", handler: onDOMLoaded },\n            { name: \"destroy\", handler: onDestroy },\n        ];\n        const listeners = partialListeners.filter((listener) => listener.handler != null);\n        if (!listeners.length) {\n            return;\n        }\n        const deregisterList = listeners.map(\n        /**\n         * Handle the process of adding an event listener\n         * @param {Listener} listener\n         * @return {Function} Function that deregister the listener\n         */\n        (listener) => {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener(listener.name, listener.handler);\n            // Return a function to deregister this listener\n            return () => {\n                var _a;\n                (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener(listener.name, listener.handler);\n            };\n        });\n        // Deregister listeners on unmount\n        return () => {\n            deregisterList.forEach((deregister) => deregister());\n        };\n    }, [\n        onComplete,\n        onLoopComplete,\n        onEnterFrame,\n        onSegmentStart,\n        onConfigReady,\n        onDataReady,\n        onDataFailed,\n        onLoadedImages,\n        onDOMLoaded,\n        onDestroy,\n    ]);\n    /**\n     * Build the animation view\n     */\n    const View = React.createElement(\"div\", { style: style, ref: animationContainer, ...rest });\n    return {\n        View,\n        play,\n        stop,\n        pause,\n        setSpeed,\n        goToAndStop,\n        goToAndPlay,\n        setDirection,\n        playSegments,\n        setSubframe,\n        getDuration,\n        destroy,\n        animationContainerRef: animationContainer,\n        animationLoaded,\n        animationItem: animationInstanceRef.current,\n    };\n};\nexport default useLottie;\n", "import { useEffect } from \"react\";\n// helpers\nexport function getContainerVisibility(container) {\n    const { top, height } = container.getBoundingClientRect();\n    const current = window.innerHeight - top;\n    const max = window.innerHeight + height;\n    return current / max;\n}\nexport function getContainerCursorPosition(container, cursorX, cursorY) {\n    const { top, left, width, height } = container.getBoundingClientRect();\n    const x = (cursorX - left) / width;\n    const y = (cursorY - top) / height;\n    return { x, y };\n}\nexport const useInitInteractivity = ({ wrapperRef, animationItem, mode, actions, }) => {\n    useEffect(() => {\n        const wrapper = wrapperRef.current;\n        if (!wrapper || !animationItem || !actions.length) {\n            return;\n        }\n        animationItem.stop();\n        const scrollModeHandler = () => {\n            let assignedSegment = null;\n            const scrollHandler = () => {\n                const currentPercent = getContainerVisibility(wrapper);\n                // Find the first action that satisfies the current position conditions\n                const action = actions.find(({ visibility }) => visibility &&\n                    currentPercent >= visibility[0] &&\n                    currentPercent <= visibility[1]);\n                // Skip if no matching action was found!\n                if (!action) {\n                    return;\n                }\n                if (action.type === \"seek\" &&\n                    action.visibility &&\n                    action.frames.length === 2) {\n                    // Seek: Go to a frame based on player scroll position action\n                    const frameToGo = action.frames[0] +\n                        Math.ceil(((currentPercent - action.visibility[0]) /\n                            (action.visibility[1] - action.visibility[0])) *\n                            action.frames[1]);\n                    //! goToAndStop must be relative to the start of the current segment\n                    animationItem.goToAndStop(frameToGo - animationItem.firstFrame - 1, true);\n                }\n                if (action.type === \"loop\") {\n                    // Loop: Loop a given frames\n                    if (assignedSegment === null) {\n                        // if not playing any segments currently. play those segments and save to state\n                        animationItem.playSegments(action.frames, true);\n                        assignedSegment = action.frames;\n                    }\n                    else {\n                        // if playing any segments currently.\n                        //check if segments in state are equal to the frames selected by action\n                        if (assignedSegment !== action.frames) {\n                            // if they are not equal. new segments are to be loaded\n                            animationItem.playSegments(action.frames, true);\n                            assignedSegment = action.frames;\n                        }\n                        else if (animationItem.isPaused) {\n                            // if they are equal the play method must be called only if lottie is paused\n                            animationItem.playSegments(action.frames, true);\n                            assignedSegment = action.frames;\n                        }\n                    }\n                }\n                if (action.type === \"play\" && animationItem.isPaused) {\n                    // Play: Reset segments and continue playing full animation from current position\n                    animationItem.resetSegments(true);\n                    animationItem.play();\n                }\n                if (action.type === \"stop\") {\n                    // Stop: Stop playback\n                    animationItem.goToAndStop(action.frames[0] - animationItem.firstFrame - 1, true);\n                }\n            };\n            document.addEventListener(\"scroll\", scrollHandler);\n            return () => {\n                document.removeEventListener(\"scroll\", scrollHandler);\n            };\n        };\n        const cursorModeHandler = () => {\n            const handleCursor = (_x, _y) => {\n                let x = _x;\n                let y = _y;\n                // Resolve cursor position if cursor is inside container\n                if (x !== -1 && y !== -1) {\n                    // Get container cursor position\n                    const pos = getContainerCursorPosition(wrapper, x, y);\n                    // Use the resolved position\n                    x = pos.x;\n                    y = pos.y;\n                }\n                // Find the first action that satisfies the current position conditions\n                const action = actions.find(({ position }) => {\n                    if (position &&\n                        Array.isArray(position.x) &&\n                        Array.isArray(position.y)) {\n                        return (x >= position.x[0] &&\n                            x <= position.x[1] &&\n                            y >= position.y[0] &&\n                            y <= position.y[1]);\n                    }\n                    if (position &&\n                        !Number.isNaN(position.x) &&\n                        !Number.isNaN(position.y)) {\n                        return x === position.x && y === position.y;\n                    }\n                    return false;\n                });\n                // Skip if no matching action was found!\n                if (!action) {\n                    return;\n                }\n                // Process action types:\n                if (action.type === \"seek\" &&\n                    action.position &&\n                    Array.isArray(action.position.x) &&\n                    Array.isArray(action.position.y) &&\n                    action.frames.length === 2) {\n                    // Seek: Go to a frame based on player scroll position action\n                    const xPercent = (x - action.position.x[0]) /\n                        (action.position.x[1] - action.position.x[0]);\n                    const yPercent = (y - action.position.y[0]) /\n                        (action.position.y[1] - action.position.y[0]);\n                    animationItem.playSegments(action.frames, true);\n                    animationItem.goToAndStop(Math.ceil(((xPercent + yPercent) / 2) *\n                        (action.frames[1] - action.frames[0])), true);\n                }\n                if (action.type === \"loop\") {\n                    animationItem.playSegments(action.frames, true);\n                }\n                if (action.type === \"play\") {\n                    // Play: Reset segments and continue playing full animation from current position\n                    if (animationItem.isPaused) {\n                        animationItem.resetSegments(false);\n                    }\n                    animationItem.playSegments(action.frames);\n                }\n                if (action.type === \"stop\") {\n                    animationItem.goToAndStop(action.frames[0], true);\n                }\n            };\n            const mouseMoveHandler = (ev) => {\n                handleCursor(ev.clientX, ev.clientY);\n            };\n            const mouseOutHandler = () => {\n                handleCursor(-1, -1);\n            };\n            wrapper.addEventListener(\"mousemove\", mouseMoveHandler);\n            wrapper.addEventListener(\"mouseout\", mouseOutHandler);\n            return () => {\n                wrapper.removeEventListener(\"mousemove\", mouseMoveHandler);\n                wrapper.removeEventListener(\"mouseout\", mouseOutHandler);\n            };\n        };\n        switch (mode) {\n            case \"scroll\":\n                return scrollModeHandler();\n            case \"cursor\":\n                return cursorModeHandler();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [mode, animationItem]);\n};\nconst useLottieInteractivity = ({ actions, mode, lottieObj, }) => {\n    const { animationItem, View, animationContainerRef } = lottieObj;\n    useInitInteractivity({\n        actions,\n        animationItem,\n        mode,\n        wrapperRef: animationContainerRef,\n    });\n    return View;\n};\nexport default useLottieInteractivity;\n", "import { useEffect } from \"react\";\nimport useLottie from \"../hooks/useLottie\";\nimport useLottieInteractivity from \"../hooks/useLottieInteractivity\";\nconst Lottie = (props) => {\n    var _a, _b, _c;\n    const { style, interactivity, ...lottieProps } = props;\n    /**\n     * Initialize the 'useLottie' hook\n     */\n    const { View, play, stop, pause, setSpeed, goToAndStop, goToAndPlay, setDirection, playSegments, setSubframe, getDuration, destroy, animationContainerRef, animationLoaded, animationItem, } = useLottie(lottieProps, style);\n    /**\n     * Make the hook variables/methods available through the provided 'lottieRef'\n     */\n    useEffect(() => {\n        if (props.lottieRef) {\n            props.lottieRef.current = {\n                play,\n                stop,\n                pause,\n                setSpeed,\n                goToAndPlay,\n                goToAndStop,\n                setDirection,\n                playSegments,\n                setSubframe,\n                getDuration,\n                destroy,\n                animationContainerRef,\n                animationLoaded,\n                animationItem,\n            };\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [(_a = props.lottieRef) === null || _a === void 0 ? void 0 : _a.current]);\n    return useLottieInteractivity({\n        lottieObj: {\n            View,\n            play,\n            stop,\n            pause,\n            setSpeed,\n            goToAndStop,\n            goToAndPlay,\n            setDirection,\n            playSegments,\n            setSubframe,\n            getDuration,\n            destroy,\n            animationContainerRef,\n            animationLoaded,\n            animationItem,\n        },\n        actions: (_b = interactivity === null || interactivity === void 0 ? void 0 : interactivity.actions) !== null && _b !== void 0 ? _b : [],\n        mode: (_c = interactivity === null || interactivity === void 0 ? void 0 : interactivity.mode) !== null && _c !== void 0 ? _c : \"scroll\",\n    });\n};\nexport default Lottie;\n"],
  "mappings": "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",
  "names": ["useLottie", "props", "style", "animationData", "loop", "autoplay", "initialSegment", "onComplete", "onLoopComplete", "onEnterFrame", "onSegmentStart", "onConfigReady", "onDataReady", "onDataFailed", "onLoadedImages", "onDOMLoaded", "onDestroy", "lottieRef", "renderer", "name", "assetsPath", "rendererSettings", "rest", "_objectWithoutProperties", "_excluded", "_useState", "useState", "_useState2", "_slicedToArray", "animationLoaded", "setAnimationLoaded", "animationInstanceRef", "useRef", "animationContainer", "play", "_a", "current", "stop", "pause", "setSpeed", "speed", "goToAndPlay", "value", "isFrame", "goToAndStop", "setDirection", "direction", "playSegments", "segments", "forceFlag", "setSubframe", "useSubFrames", "getDuration", "inFrames", "destroy", "undefined", "loadAnimation", "forcedConfigs", "arguments", "length", "config", "_objectSpread", "container", "lottie", "useEffect", "onUnmount", "resetSegments", "Array", "isArray", "currentRawFrame", "setSegment", "partialListeners", "handler", "listeners", "filter", "listener", "deregisterList", "map", "addEventListener", "removeEventListener", "forEach", "deregister", "View", "React", "createElement", "ref", "animationContainerRef", "animationItem", "getContainerVisibility", "_container$getBoundin", "getBoundingClientRect", "top", "height", "window", "innerHeight", "max", "getContainerCursorPosition", "cursorX", "cursorY", "_container$getBoundin2", "left", "width", "x", "y", "useInitInteractivity", "_ref", "wrapperRef", "mode", "actions", "wrapper", "scrollModeHandler", "assignedSegment", "scrollHandler", "currentPercent", "action", "find", "_ref2", "visibility", "type", "frames", "frameToGo", "Math", "ceil", "firstFrame", "isPaused", "document", "cursorModeHandler", "handleCursor", "_x", "_y", "pos", "_ref3", "position", "Number", "isNaN", "xPercent", "yPercent", "mouseMoveHandler", "ev", "clientX", "clientY", "mouseOutHandler", "useLottieInteractivity", "_ref4", "lottieObj", "Lottie", "_b", "_c", "interactivity", "lottieProps", "_useLottie"]
}
