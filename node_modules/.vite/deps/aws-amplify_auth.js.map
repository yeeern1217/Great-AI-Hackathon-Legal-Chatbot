{
  "version": 3,
  "sources": ["../../@aws-amplify/auth/src/client/utils/passkey/registerPasskey.ts", "../../@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createStartWebAuthnRegistrationClient.ts", "../../@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createCompleteWebAuthnRegistrationClient.ts", "../../@aws-amplify/auth/src/client/apis/associateWebAuthnCredential.ts", "../../@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createListWebAuthnCredentialsClient.ts", "../../@aws-amplify/auth/src/foundation/apis/listWebAuthnCredentials.ts", "../../@aws-amplify/auth/src/client/apis/listWebAuthnCredentials.ts", "../../@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteWebAuthnCredentialClient.ts", "../../@aws-amplify/auth/src/foundation/apis/deleteWebAuthnCredential.ts", "../../@aws-amplify/auth/src/client/apis/deleteWebAuthnCredential.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertCredentialIsPkcWithAuthenticatorAttestationResponse, } from './types';\nimport { deserializeJsonToPkcCreationOptions, serializePkcWithAttestationToJson, } from './serde';\nimport { PasskeyErrorCode, assertPasskeyError, handlePasskeyRegistrationError, } from './errors';\nimport { getIsPasskeySupported } from './getIsPasskeySupported';\n/**\n * Registers a new passkey for user\n * @param input - PasskeyCreateOptionsJson\n * @returns serialized PasskeyCreateResult\n */\nexport const registerPasskey = async (input) => {\n    try {\n        const isPasskeySupported = getIsPasskeySupported();\n        assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);\n        const passkeyCreationOptions = deserializeJsonToPkcCreationOptions(input);\n        const credential = await navigator.credentials.create({\n            publicKey: passkeyCreationOptions,\n        });\n        assertCredentialIsPkcWithAuthenticatorAttestationResponse(credential);\n        return serializePkcWithAttestationToJson(credential);\n    }\n    catch (err) {\n        throw handlePasskeyRegistrationError(err);\n    }\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createStartWebAuthnRegistrationClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('StartWebAuthnRegistration'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createCompleteWebAuthnRegistrationClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('CompleteWebAuthnRegistration'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../utils';\nimport { registerPasskey } from '../utils';\nimport { createCompleteWebAuthnRegistrationClient, createStartWebAuthnRegistrationClient, } from '../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { assertValidCredentialCreationOptions } from '../utils/passkey/types';\n/**\n * Registers a new passkey for an authenticated user\n *\n * @returns Promise<void>\n * @throws - {@link PasskeyError}:\n * - Thrown when intermediate state is invalid\n * @throws - {@link AuthError}:\n * - Thrown when user is unauthenticated\n * @throws - {@link StartWebAuthnRegistrationException}\n * - Thrown due to a service error retrieving WebAuthn registration options\n * @throws - {@link CompleteWebAuthnRegistrationException}\n * - Thrown due to a service error when verifying WebAuthn registration result\n */\nexport async function associateWebAuthnCredential() {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession();\n    assertAuthTokens(tokens);\n    const startWebAuthnRegistration = createStartWebAuthnRegistrationClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CredentialCreationOptions: credentialCreationOptions } = await startWebAuthnRegistration({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.StartWebAuthnRegistration),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n    });\n    assertValidCredentialCreationOptions(credentialCreationOptions);\n    const cred = await registerPasskey(credentialCreationOptions);\n    const completeWebAuthnRegistration = createCompleteWebAuthnRegistrationClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await completeWebAuthnRegistration({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.CompleteWebAuthnRegistration),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        Credential: cred,\n    });\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createListWebAuthnCredentialsClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ListWebAuthnCredentials'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../parsers';\nimport { getAuthUserAgentValue } from '../../utils';\nimport { createListWebAuthnCredentialsClient } from '../factories/serviceClients/cognitoIdentityProvider';\nexport async function listWebAuthnCredentials(amplify, input) {\n    const authConfig = amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await amplify.Auth.fetchAuthSession();\n    assertAuthTokens(tokens);\n    const listWebAuthnCredentialsResult = createListWebAuthnCredentialsClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { Credentials: commandCredentials = [], NextToken: nextToken } = await listWebAuthnCredentialsResult({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ListWebAuthnCredentials),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        MaxResults: input?.pageSize,\n        NextToken: input?.nextToken,\n    });\n    const credentials = commandCredentials.map(item => ({\n        credentialId: item.CredentialId,\n        friendlyCredentialName: item.FriendlyCredentialName,\n        relyingPartyId: item.RelyingPartyId,\n        authenticatorAttachment: item.AuthenticatorAttachment,\n        authenticatorTransports: item.AuthenticatorTransports,\n        createdAt: item.CreatedAt ? new Date(item.CreatedAt * 1000) : undefined,\n    }));\n    return {\n        credentials,\n        nextToken,\n    };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { listWebAuthnCredentials as listWebAuthnCredentialsFoundation } from '../../foundation/apis';\n/**\n * Lists registered credentials for an authenticated user\n *\n * @param {ListWebAuthnCredentialsInput} input The list input parameters including page size and next token.\n * @returns Promise<ListWebAuthnCredentialsOutput>\n * @throws - {@link AuthError}:\n * - Thrown when user is unauthenticated\n * @throws - {@link ListWebAuthnCredentialsException}\n * - Thrown due to a service error when listing WebAuthn credentials\n */\nexport async function listWebAuthnCredentials(input) {\n    return listWebAuthnCredentialsFoundation(Amplify, input);\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createDeleteWebAuthnCredentialClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('DeleteWebAuthnCredential'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../parsers';\nimport { getAuthUserAgentValue } from '../../utils';\nimport { createDeleteWebAuthnCredentialClient } from '../factories/serviceClients/cognitoIdentityProvider';\nexport async function deleteWebAuthnCredential(amplify, input) {\n    const authConfig = amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await amplify.Auth.fetchAuthSession();\n    assertAuthTokens(tokens);\n    const deleteWebAuthnCredentialResult = createDeleteWebAuthnCredentialClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await deleteWebAuthnCredentialResult({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.DeleteWebAuthnCredential),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        CredentialId: input.credentialId,\n    });\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { deleteWebAuthnCredential as deleteWebAuthnCredentialFoundation } from '../../foundation/apis';\n/**\n * Delete a registered credential for an authenticated user by credentialId\n * @param {DeleteWebAuthnCredentialInput} input The delete input parameters including the credentialId\n * @returns Promise<void>\n * @throws - {@link AuthError}:\n * - Thrown when user is unauthenticated\n * @throws - {@link DeleteWebAuthnCredentialException}\n * - Thrown due to a service error when deleting a WebAuthn credential\n */\nexport async function deleteWebAuthnCredential(input) {\n    return deleteWebAuthnCredentialFoundation(Amplify, input);\n}\n"],
  "mappings": "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",
  "names": ["listWebAuthnCredentials", "listWebAuthnCredentialsFoundation", "deleteWebAuthnCredential", "deleteWebAuthnCredentialFoundation"]
}
